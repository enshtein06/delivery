import axios from 'axios';
import {put, call, all, takeEvery} from 'redux-saga/effects';

import { authSuccess, authFail} from './actions/auth';
import { 
	pointsLoadingSuccess, 
	pointsLoadingFailed, 
	citiesLoadingSuccess,
	citiesLoadingFailed
} from './actions/points';

import {LOAD_CITIES_SUCCESS, AUTH_START, LOAD_CITIES_START, LOAD_POINTS_START} from './actions/types';

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/********************************************* AUTHENTICATION SAGAS ***************************************************/
export function* signupWatcher() {
	yield takeEvery(AUTH_START, authStarted);
}


function* authStarted(args) {
	try {
		let url = "https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyAG9ls1ug6Z4eApLvc6EC7wIWoSb-DF1r0";
		console.log(args)
		if(!args.payload.isSignup) {
			url  = "https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyAG9ls1ug6Z4eApLvc6EC7wIWoSb-DF1r0";
		}
		const data = yield call(authStart, url, args.payload);
		
		// TODO: throw success action
		yield put(authSuccess(data.idToken, data.localId));
	} catch (e) {
		// TODO: throw failed action
		yield put(authFail(e.error));
	}
}

//email, password, isSignup
// axios requests
function authStart(url, {email, password, returnSecureToken}) {
	const authData = {
		email, password, returnSecureToken
	}
	//console.log(url)
	return axios.post(url, authData).then(response => {
			const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);
			localStorage.setItem('token', response.data.idToken);
			localStorage.setItem('expirationDate', expirationDate.getTime());
			localStorage.setItem('userId', response.data.localId);
			//authSuccess(response.data.idToken, response.data.localId);
			console.log(response);
			return {
				idToken: response.data.idToken,
				localId: response.data.localId
			};
		})
		.catch(err => {
			//authFail(err.response.data.error);
			return {error: err.response.data.error};
		})
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/************************************************ POINTS LOADING ******************************************************/

export function* pointsLoadingWatcher() {
	yield takeEvery(LOAD_POINTS_START, pointsLoadingStarted);
}

export function* citiesLoadingSucceeded () {
	yield takeEvery(LOAD_CITIES_SUCCESS, pointsLoadingStarted);
}


function* pointsLoadingStarted() {
	try {

		// Load Points Block
		const url = "https://deliveryproject-3bbd6.firebaseio.com/points.json";
		const data = yield call(axiosGetRequest, url);
		yield put(pointsLoadingSuccess(data));
	} catch (e) {
		yield put(pointsLoadingFailed());
	}
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/************************************************ CITIES LOADING ******************************************************/

export function* citiesLoadingWatcher() {
	yield takeEvery(LOAD_CITIES_START, citiseLoadingStarted)
}

function* citiseLoadingStarted () {
	try {
		const urlCities = "https://deliveryproject-3bbd6.firebaseio.com/cities.json";
		const dataCities = yield call(axiosGetRequest, urlCities);
		yield put(citiesLoadingSuccess(dataCities));
	} catch (e) {
		console.log(e)
		yield put(citiesLoadingFailed());
	}
}


function axiosGetRequest(url) {
	return axios.get(url).then(res => res.data);

}

export default function* rootSaga() {
	yield all([
		signupWatcher(),
		pointsLoadingWatcher(),
		citiesLoadingWatcher(),
		citiesLoadingSucceeded()
	]);
};